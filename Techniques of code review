1. We should give time to reviewer to review code 
2. Document set of rules in confluence which have which coding standards each and every Team member should follow for in a team example
- no console logs
- give proper indentation
- logging should be there
Each and every developer should be confirm these checklist before giving code for code review
3. PR should have at least two reviewers 
- 1st normal developer
- 2nd senior or lead developer
4. But humans can forget to check checklist that's why automate things using Automation tool at your check in level like with eslint or other thing that if code has console logs then code should not be push and it should not go for review.
5. As of now we do two things
- we have defined set or rules which are needs to followed by team
- and if there is any human error happen means human forget to remove console logs then automation tool like eslint will prevent it to check in
6.  By doing these things even developer can commit code which is not performant or not readable code because no eslint tool is going to catch that then comes the responsibility of reviewer who needs to check all these things , reviewer needs to be skilled enough to catch all these problems in code To check that code is having any latency issue or not ?
7. For reviewers there are another set of rules like
- Code should be performant
- code should have readable means code should have meaningful names because no eslint tool is going to catch that variable name is not meaningful
- reviewer should understand it should be not like that The way I code the same way code should be come from other people, reviewer should accept the new things from author if it is efficient
- Generally in team there is a dedicated 2 or 3 member reviewer team who are doing code review
- sometimes apporved the PR and meet that person over a coffee and say in formally that hey , you could do this better , I am not saying you done wrong but it could be better then that person will explain you
8. This is process and it will not happening from day 1 , it will take some time but once your team started follow it then whole PR process will be smooth
9. I have seen reviewer are very picky for variable name all these kinds and that's why sometime author is frustrated and resigned from job
10. In remote working we are not able to connect with developer in fromally so instead of giving comments left and right just connect with that developer over call and do peer review by sharing screen instead of PR review and explain him what could be better.
11. One of the most important mistakes people do is using old deprecated methods or using old library or framework code which is no longer Being used or they are not good for production use cases , one shoukd be always upto date with latest language or library or framework version.
12. Use your language optimization techniques if you are facing any issue
13. Don't use any third party library if it's not adding much value in your project like avoid to use lodash and moment library in your code because they are not adding much value in your code.
14. Don't overengineering your code Unless you have issue.
15. Get your code reviewed by multiple reviewers so you will get variety of comments
16. If you don't include third party library much the your software will be more lightweight
17. You should always update the documentation after each feature implementations so any new joiner will understand it from there
18. After code review changelog should be updated that what we have done through this code mplementation.
19. You should use date-fns instead of moment js but try to complete all the requirements by using vanila js so you don't needs to add any third party library
20. Because third party library are big so tree shaking and bundle of your code will impact because of this.
21. We should read vanila js docs so most of cases will be converted by vanila js only without using any 3rd party libraries
22. We are using date-fns from last six months and it's light weight and supports tree shaking and so we can full fill complex date related things using date-fns library.
